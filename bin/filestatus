#!/usr/lib/env ruby
# encoding: utf-8

=begin
Copyright (c) 2012, Daniel Mei√üner <dm@3st.be>

Filestatus is licensed under the following ISC-style license:

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
=end

require 'dme/filestatus'
require 'optparse'

COMMANDS = %w[start stop restart status init]

def parse(args)
  options = {}

  parser = OptionParser.new do |opts|
    opts.banner = "Usage: filestatus [options] #{COMMANDS.join('|')}"

    opts.separator ""
    opts.separator "Daemon options:"

    opts.on('-d', '--daemonize', 'Run daemonized in the background') do |daemonize|
      options[:daemonize] = daemonize
    end

    options[:log] = ENV['HOME'] + '/.filestatus/filestatus.log'
    opts.on('-l', '--log FILE', 'File to redirect output (default: ~/.filestatus/filestatus.log)') do |log|
      options[:log] = log
    end

    options[:pid] = ENV['HOME'] + '/.filestatus/filestatus.pid'
    opts.on('-P', '--pid FILE', 'File to store PID (default: ~/.filestatus/pid/filestatus.pid)') do |pid|
      options[:pid] = pid
    end

    opts.separator ""
    opts.separator "Common options:"

    opts.on('-h', '--help', 'Show this message') do |help|
      options[:help] = help
    end

    opts.on('-v', '--version', 'Show version') do |version|
      options[:version] = version
    end
  end

  begin
    parser.parse!(args)
  rescue
    puts parser
    exit(1)
  end

  if options[:version]
    license = File.read(__FILE__)[/=begin\n(.*)\n=end/m, 1]

    puts <<-VERSION
Filestatus v#{Dme::Filestatus::VERSION}

#{license}
    VERSION
    exit(0)
  end

  if options[:help]
    puts parser
    exit
  end

  command = args.shift
  unless COMMANDS.include?(command)
    puts parser
    exit(1)
  end

  options.tap do |opts|
    opts[:args]    = args
    opts[:command] = command
    opts[:config]  = File.expand_path("#{ENV['HOME'] + '/.filestatus/config.yml'}")
    opts[:pid]     = File.expand_path(opts[:pid])
    opts[:log]     = File.expand_path(opts[:log])
  end
end

FILESTATUS_ROOT = Dir.pwd
opts            = parse(ARGV)
command         = Dme::Filestatus::Command.new

@@config = Dme::Filestatus::Config.init(opts[:config])


begin
  command.run(opts)
rescue SystemExit
  # do nothing
rescue Exception => e
  puts e.message
  exit(1)
end